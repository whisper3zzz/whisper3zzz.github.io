import{_ as g}from"./ValaxyMain.vue_vue_type_script_setup_true_lang.UeO0aKI3.js";import"./chunks/pinia.BFamNAX0.js";import{e as E,u as f,a as B}from"./chunks/vue-router.CLlYW99z.js";import{a7 as y,an as a,X as k,a8 as v,am as e,af as s,ac as h,aj as n,Z as b}from"./framework.DIdR4KMW.js";import"./app.D31Dy1By.js";import"./chunks/dayjs.BdcnXKr1.js";import"./chunks/vue-i18n.C-hb0qar.js";/* empty css                    */import"./chunks/nprogress.B6x19dEb.js";import"./content.DZLhsl5J.js";import"./router.-rV2tM5K.js";const x="/assets/UnityShader%E4%B8%8E%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%EF%BC%884%EF%BC%89_hsv.CtIxuMai.jpg",c="/assets/UnityShader%E4%B8%8E%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%EF%BC%884%EF%BC%89_step.D5Wxb3rn.jpg",F="/assets/UnityShader%E4%B8%8E%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%EF%BC%884%EF%BC%89_smoothstep.BW8vFkDR.jpg",C="/assets/UnityShader%E4%B8%8E%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%EF%BC%884%EF%BC%89_circle.35JzBDYE.jpg",A="/assets/UnityShader%E4%B8%8E%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%EF%BC%884%EF%BC%89_%E7%9F%A9%E5%BD%A2.CdMYlUGF.jpg",U="/assets/UnityShader%E4%B8%8E%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%EF%BC%884%EF%BC%89_small.YpgAJKUy.jpg",S="/assets/UnityShader%E4%B8%8E%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%EF%BC%884%EF%BC%89_sin.BRXVV5aX.jpg",D="/assets/UnityShader%E4%B8%8E%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%EF%BC%884%EF%BC%89_Practice.ZqzrQpIx.jpg",T="/assets/UnityShader%E4%B8%8E%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%EF%BC%884%EF%BC%89_%E5%8A%A8%E7%94%BB1.CnjvLsQX.gif",P="/assets/UnityShader%E4%B8%8E%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%EF%BC%884%EF%BC%89_%E5%8A%A8%E7%94%BB2.CgWb8Wd1.gif",z="/assets/UnityShader%E4%B8%8E%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%EF%BC%884%EF%BC%89_%E6%B3%A2%E6%B5%AA.B4LjkJcO.jpg",$=E("/posts/Unity-Shader与图形渲染（4）/Unity-Shader与图形渲染（4）",async t=>JSON.parse('{"title":"Unity Shader与图形渲染（4）","description":"","frontmatter":{"title":"Unity Shader与图形渲染（4）","date":"2024-02-21 11:19:13","categories":"学习","tags":["渲染","Unity"]},"headers":[],"relativePath":"pages/posts/Unity-Shader与图形渲染（4）/Unity-Shader与图形渲染（4）.md","lastUpdated":1761835150000}'),{lazy:(t,o)=>t.name===o.name}),X={__name:"Unity-Shader与图形渲染（4）",setup(t,{expose:o}){const{data:r}=$(),u=B(),d=f(),p=Object.assign(d.meta.frontmatter||{},r.value?.frontmatter||{});return u.currentRoute.value.data=r.value,b("valaxy:frontmatter",p),globalThis.$frontmatter=p,o({frontmatter:{title:"Unity Shader与图形渲染（4）",date:"2024-02-21 11:19:13",categories:"学习",tags:["渲染","Unity"]}}),(i,l)=>{const m=g;return v(),y(m,{frontmatter:k(p)},{"main-content-md":a(()=>[l[0]||(l[0]=s("p",null,"颜色、形状、动画",-1)),l[1]||(l[1]=s("p",null,"如何在Shader中创建颜色和形状，实现动画效果，屏幕后处理",-1)),h(" more "),l[2]||(l[2]=s("h1",{id:"颜色",tabindex:"-1"},[n("颜色 "),s("a",{class:"header-anchor",href:"#颜色","aria-label":'Permalink to "颜色"'},"​")],-1)),l[3]||(l[3]=s("h2",{id:"色彩空间-color-space",tabindex:"-1"},[n("色彩空间 Color Space "),s("a",{class:"header-anchor",href:"#色彩空间-color-space","aria-label":'Permalink to "色彩空间 Color Space"'},"​")],-1)),l[4]||(l[4]=s("p",null,[n("表达颜色的方式可以有很多种。比如最常见的RGB颜色，以及加入加入透明度（alpha）的RGBA颜色以及通过色彩（Hue）、饱和度（Saturation）和明度（Brightness）表示的HSV颜色： "),s("img",{src:x,alt:""})],-1)),l[5]||(l[5]=s("h2",{id:"颜色的属性",tabindex:"-1"},[n("颜色的属性 "),s("a",{class:"header-anchor",href:"#颜色的属性","aria-label":'Permalink to "颜色的属性"'},"​")],-1)),l[6]||(l[6]=s("ul",null,[s("li",null,"明度（brightness/value）：与同样亮的白色物体相比，某物的亮的程度。"),s("li",null,"亮度/辉度（luminance）：发光或反射光的强度。也就是黑白照片中每个颜色的明度。"),s("li",null,"饱和度（saturation）：鲜艳程度。也就是【1 - 与该颜色的亮度的距离】。"),s("li",null,"对比度（contrast）：1 - 与灰色(0.5,0.5,0.5)的距离。"),s("li",null,"透明度（transparency）：一种该颜色alpha值的表现形式。Alpha值只不过是一个数字，它并不一定需要表示透明度。")],-1)),l[7]||(l[7]=s("p",null,"直接对一个颜色乘以一个数，改变的是颜色的明度。",-1)),l[8]||(l[8]=s("h2",{id:"颜色的混合",tabindex:"-1"},[n("颜色的混合 "),s("a",{class:"header-anchor",href:"#颜色的混合","aria-label":'Permalink to "颜色的混合"'},"​")],-1)),l[9]||(l[9]=s("p",null,"在图形渲染中，并不局限于使用颜料混合（乘法）或光学混合（加法）。",-1)),l[10]||(l[10]=s("p",null,[s("code",null,"C = A * B C = A + B C = A – B C = (A + B)/2")],-1)),l[11]||(l[11]=s("h2",{id:"使用shader进行屏幕后处理",tabindex:"-1"},[n("使用shader进行屏幕后处理 "),s("a",{class:"header-anchor",href:"#使用shader进行屏幕后处理","aria-label":'Permalink to "使用shader进行屏幕后处理"'},"​")],-1)),l[12]||(l[12]=s("p",null,"在拥有了在shader中处理颜色的能力后，就能够把当前帧的画面拿下来并在上面做任想做的操作了，可以使用以下的方法将自己的shader应用在相机上：",-1)),l[13]||(l[13]=s("div",{class:"language-c#"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"c#"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"private"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," void"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," OnRenderImage"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"RenderTexture"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," source"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"RenderTexture"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," destination"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"	Graphics."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Blit"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(source, destination, mat); "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//mat是shader的材质")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//在脚本里面要定义一个Material类型的变量")])])]),s("button",{class:"code-block-unfold-btn"})],-1)),l[14]||(l[14]=s("p",null,"如何实现马赛克化效果？",-1)),l[15]||(l[15]=s("div",{class:"language-clike"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"clike"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",null,"//In fragment shader")]),n(`
`),s("span",{class:"line"},[s("span",null,"flaot size=10;//马赛克大小")]),n(`
`),s("span",{class:"line"},[s("span",null,"i.uv=floor(i.uv*size)/size;//取uv坐标的整数部分，挤压数据")])])]),s("button",{class:"code-block-unfold-btn"})],-1)),l[16]||(l[16]=s("h1",{id:"形状",tabindex:"-1"},[n("形状 "),s("a",{class:"header-anchor",href:"#形状","aria-label":'Permalink to "形状"'},"​")],-1)),l[17]||(l[17]=s("h2",{id:"step函数",tabindex:"-1"},[n("step函数 "),s("a",{class:"header-anchor",href:"#step函数","aria-label":'Permalink to "step函数"'},"​")],-1)),l[18]||(l[18]=s("p",null,"在shader中应该尽量避免使用if-else语句。这是因为if-else语句在GPU这种多并行的架构上会拖慢性能。",-1)),l[19]||(l[19]=s("p",null,[n("几乎可以使用step函数代替所有的if-else语句，"),s("code",null,"step(a,x)")],-1)),l[20]||(l[20]=s("p",null,"step函数很简单：接受两个参数a、x，当x>=a时返回1，否则返回0。下面是step(0,x)的函数图像。",-1)),l[21]||(l[21]=s("figure",null,[s("img",{src:c,alt:"",loading:"lazy",decoding:"async"})],-1)),l[22]||(l[22]=s("div",{class:"language-clike"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"clike"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",null,"//要实现“一个长方形的左半边为红色，右半边为蓝色”的shader效果，可以这么写")]),n(`
`),s("span",{class:"line"},[s("span",null,"if(uv.x<0.5)")]),n(`
`),s("span",{class:"line"},[s("span",null,"	color = fixed4(1,0,0,1);")]),n(`
`),s("span",{class:"line"},[s("span",null,"else")]),n(`
`),s("span",{class:"line"},[s("span",null,"	color = fixed4(0,0,1,1);")]),n(`
`),s("span",{class:"line"},[s("span",null,"//使用step函数的话，它会变成这样：")]),n(`
`),s("span",{class:"line"},[s("span",null,"float isLeft = step(0.5,x);")]),n(`
`),s("span",{class:"line"},[s("span",null,"color = lerp(fixed4(1,0,0,1), fixed4(0,0,1,1), isLeft);")])])]),s("button",{class:"code-block-unfold-btn"})],-1)),l[23]||(l[23]=s("h2",{id:"smoothstep函数",tabindex:"-1"},[n("smoothstep函数 "),s("a",{class:"header-anchor",href:"#smoothstep函数","aria-label":'Permalink to "smoothstep函数"'},"​")],-1)),l[24]||(l[24]=s("p",null,"step函数会造成许多硬边。这时就需要smoothstep函数来解决这个问题了。",-1)),l[25]||(l[25]=s("p",null,[s("code",null,"smoothstep(a,b,x) "),n(" 当x>=b时，返回1；当x<=a时，返回0；否则根据x的值返回一个a、b之间的平滑过渡。")],-1)),l[26]||(l[26]=s("p",null,"下图是smoothstep(-0.5,0.5,x)的图像。",-1)),l[27]||(l[27]=s("figure",null,[s("img",{src:F,alt:"",loading:"lazy",decoding:"async"})],-1)),l[28]||(l[28]=s("p",null,"通常情况下都可以用smoothstep函数代替step函数来实现平滑的边缘过渡",-1)),l[29]||(l[29]=s("p",null,[s("code",null,"step(0.5, x)"),n("可以变成"),s("code",null,"smoothstep(0.49, 0.51, x)")],-1)),l[30]||(l[30]=s("p",null,[n("另外，"),s("code",null,"smoothstep(a,b,x) = 1 – smoothstep(b,a,x)")],-1)),l[31]||(l[31]=s("h2",{id:"在shader中绘制圆形",tabindex:"-1"},[n("在shader中绘制圆形 "),s("a",{class:"header-anchor",href:"#在shader中绘制圆形","aria-label":'Permalink to "在shader中绘制圆形"'},"​")],-1)),l[32]||(l[32]=s("p",null,"圆形是最简单的一种：它的定义是“和一点距离在一定范围内的所有点的集合”。",-1)),l[33]||(l[33]=s("p",null,"可以使用uv坐标来计算每一个像素点和圆形的中心点的距离，并只绘制距离小于半径的点：",-1)),l[34]||(l[34]=s("div",{class:"language-clike"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"clike"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",null,"float cirle(float2 uv,float2 pos,float radius ,float s)")]),n(`
`),s("span",{class:"line"},[s("span",null,"{")]),n(`
`),s("span",{class:"line"},[s("span",null,"    float len=length(uv-pos);")]),n(`
`),s("span",{class:"line"},[s("span",null,"    return smoothstep(radius-s,radius+s,len);")]),n(`
`),s("span",{class:"line"},[s("span",null,"}")]),n(`
`),s("span",{class:"line"},[s("span",null,"fixed4 frag (v2f i) : SV_Target")]),n(`
`),s("span",{class:"line"},[s("span",null,"{")]),n(`
`),s("span",{class:"line"},[s("span",null,"    // sample the texture")]),n(`
`),s("span",{class:"line"},[s("span",null,"    fixed4 col = tex2D(_MainTex, i.uv);")]),n(`
`),s("span",{class:"line"},[s("span",null,"    // apply fog")]),n(`
`),s("span",{class:"line"},[s("span",null,"    UNITY_APPLY_FOG(i.fogCoord, col);                            ")]),n(`
`),s("span",{class:"line"},[s("span",null,"    i.uv=i.uv*2-1;//保证uv的范围是[-1,1]，而非[0,1]。（这是为了保证(0,0)在中心）")]),n(`
`),s("span",{class:"line"},[s("span",null,"    float c1=cirle(i.uv,float2(0,0),0.5,0.1);")]),n(`
`),s("span",{class:"line"},[s("span",null,"    float c2=cirle(i.uv,float2(0.5,0.5),0.5,0.1);")]),n(`
`),s("span",{class:"line"},[s("span",null,"    col*=c1*c2;//创建的圆形是中间的值为0，外围的值为1的形状。可以使用乘法将多个形状绘制到物体上。")]),n(`
`),s("span",{class:"line"},[s("span",null,"    return col;")]),n(`
`),s("span",{class:"line"},[s("span",null,"}")]),n(`
`),s("span",{class:"line"},[s("span",null,"//")])])]),s("button",{class:"code-block-unfold-btn"})],-1)),l[35]||(l[35]=s("figure",null,[s("img",{src:C,alt:"",loading:"lazy",decoding:"async"})],-1)),l[36]||(l[36]=s("h2",{id:"在shader中绘制矩形",tabindex:"-1"},[n("在shader中绘制矩形 "),s("a",{class:"header-anchor",href:"#在shader中绘制矩形","aria-label":'Permalink to "在shader中绘制矩形"'},"​")],-1)),l[37]||(l[37]=s("p",null,"矩形由xmin, xmax, ymin, ymax四个值定义；一个矩形即是所有在这 个范围内的点的集合。",-1)),l[38]||(l[38]=s("figure",null,[s("img",{src:A,alt:"",loading:"lazy",decoding:"async"})],-1)),l[39]||(l[39]=s("p",null,"可以使用四个smoothstep函数来分别处理这四个值",-1)),l[40]||(l[40]=s("div",{class:"language-clike"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"clike"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",null,"float rect = smoothstep(xmin, xmin+0.01, uv.x);  ")]),n(`
`),s("span",{class:"line"},[s("span",null,"rect *= smoothstep(xmax+0.01, xmax, uv.x); //注意这里的参数次序！大的值在先，小的在后（为什么？）")]),n(`
`),s("span",{class:"line"},[s("span",null,"//左边是黑色还是右边是黑色的问题，两个边界的左右颜色顺序是相反的")]),n(`
`),s("span",{class:"line"},[s("span",null,"//现在已经在x轴上处理好了，接着在y轴上做同样的事情：")]),n(`
`),s("span",{class:"line"},[s("span",null,"rect *= smoothstep(ymin, ymin+0.01, uv.y);  ")]),n(`
`),s("span",{class:"line"},[s("span",null,"rect *= smoothstep(ymax+0.01, ymax, uv.y);")])])]),s("button",{class:"code-block-unfold-btn"})],-1)),l[41]||(l[41]=s("div",{class:"language-clike"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"clike"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",null,"//eg.")]),n(`
`),s("span",{class:"line"},[s("span",null,"fixed4 frag (v2f i) : SV_Target")]),n(`
`),s("span",{class:"line"},[s("span",null,"{")]),n(`
`),s("span",{class:"line"},[s("span",null,"    // sample the texture")]),n(`
`),s("span",{class:"line"},[s("span",null,"    fixed4 rect = tex2D(_MainTex, i.uv);")]),n(`
`),s("span",{class:"line"},[s("span",null,"    // apply fog")]),n(`
`),s("span",{class:"line"},[s("span",null,"    UNITY_APPLY_FOG(i.fogCoord, col);                            ")]),n(`
`),s("span",{class:"line"},[s("span",null,"    i.uv=i.uv*2-1;")]),n(`
`),s("span",{class:"line"},[s("span",null,"    col*=step(-0.5,i.uv.x);")]),n(`
`),s("span",{class:"line"},[s("span",null,"    col*=step(i.uv.x,0.5); ")]),n(`
`),s("span",{class:"line"},[s("span",null,"    col*=step(-0.5,i.uv.y);")]),n(`
`),s("span",{class:"line"},[s("span",null,"    col*=step(i.uv.y,0.5);")]),n(`
`),s("span",{class:"line"},[s("span",null,"    return rect;")]),n(`
`),s("span",{class:"line"},[s("span",null,"}")])])]),s("button",{class:"code-block-unfold-btn"})],-1)),l[42]||(l[42]=s("h2",{id:"uv变换",tabindex:"-1"},[n("UV变换 "),s("a",{class:"header-anchor",href:"#uv变换","aria-label":'Permalink to "UV变换"'},"​")],-1)),l[43]||(l[43]=s("p",null,"UV变换是一种很通用的技巧。如果把UV想象成一个二维空间的话，可以通过UV变换来任意扭曲这个空间。",-1)),l[44]||(l[44]=s("p",null,[s("code",null,"col*= circle(i.uv, float2(0,0),0.2, 0); //画一个半径为0.2的圆")],-1)),l[45]||(l[45]=s("p",null,[s("code",null,"col*= circle(i.uv*5, float2(0,0),0.5, 0); //这样会怎么样？"),n(" 圆会变小，相当于相机往外拉了")],-1)),l[46]||(l[46]=s("figure",null,[s("img",{src:U,alt:"",loading:"lazy",decoding:"async"})],-1)),l[47]||(l[47]=s("p",null,[n("i.uv.x+=sin(i."),s("code",null,"i.uv.x=sin(i.uv.y*10);")],-1)),l[48]||(l[48]=s("figure",null,[s("img",{src:S,alt:"",loading:"lazy",decoding:"async"})],-1)),l[49]||(l[49]=s("p",null,"如何实现下面四幅图中的效果？",-1)),l[50]||(l[50]=s("figure",null,[s("img",{src:D,alt:"",loading:"lazy",decoding:"async"})],-1)),l[51]||(l[51]=s("div",{class:"language-clike"},[s("button",{title:"Copy code",class:"copy"}),s("span",{class:"lang"},"clike"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[s("code",{"v-pre":""},[s("span",{class:"line"},[s("span",null,"//1. In fragment shader")]),n(`
`),s("span",{class:"line"},[s("span",null,"i.uv=floor(i.uv*10)/10;")]),n(`
`),s("span",{class:"line"},[s("span",null,"col*=i.uv.x;")]),n(`
`),s("span",{class:"line"},[s("span",null,"//实现渐变=>马赛克化")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"//2. In fragment shader")]),n(`
`),s("span",{class:"line"},[s("span",null,"//col*=sin(i.uv*50);黑白均匀版")]),n(`
`),s("span",{class:"line"},[s("span",null,"//col*=step(0.9,sin(i.uv.x*100));//白色会变小")]),n(`
`),s("span",{class:"line"},[s("span",null,"col*=1-step(0.9,sin(i.uv.x*100));//黑白反色")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"//3. In fragment shader")]),n(`
`),s("span",{class:"line"},[s("span",null,"//xy两个方向叠加2的效果")]),n(`
`),s("span",{class:"line"},[s("span",null,"col*=1-step(0.9,sin(i.uv.x*100));")]),n(`
`),s("span",{class:"line"},[s("span",null,"col*=1-step(0.9,sin(i.uv.y*100));")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"//4. In fragment shader")]),n(`
`),s("span",{class:"line"},[s("span",null,"i.uv=i.uv*2-1;")]),n(`
`),s("span",{class:"line"},[s("span",null,"col*=step(0.99,sin(length(i.uv)*100));")])])]),s("button",{class:"code-block-unfold-btn"})],-1)),l[52]||(l[52]=s("h1",{id:"时间与动画效果",tabindex:"-1"},[n("时间与动画效果 "),s("a",{class:"header-anchor",href:"#时间与动画效果","aria-label":'Permalink to "时间与动画效果"'},"​")],-1)),l[53]||(l[53]=s("p",null,"动画的核心是时间。在Unity shader中，可以通过_Time来访问当前的运行时间。",-1)),l[54]||(l[54]=s("p",null,[n("Time是一个float4，它的分量分别为(t/20, t, t2, t3)。一般使用"),s("code",null,"Time.y"),n("来获取时间。")],-1)),l[55]||(l[55]=s("p",null,[s("code",null,"col*=smoothstep(0.4,0.6,sin(length(i.uv)*30+_Time.y));")],-1)),l[56]||(l[56]=s("figure",null,[s("img",{src:T,alt:"",loading:"lazy",decoding:"async"})],-1)),l[57]||(l[57]=s("p",null,[s("code",null,"col*=smoothstep(0.4,0.6,sin(length(i.uv)*30+sin(_Time.y)));//这样是来回的效果")],-1)),l[58]||(l[58]=s("p",null,[n("再加上"),s("code",null,"col*=lerp(fixed4(1,0,0,1),fixed4(0,0,1,1),sin(_Time.y)/2+0.5);"),n("会有这样的效果")],-1)),l[59]||(l[59]=s("figure",null,[s("img",{src:P,alt:"",loading:"lazy",decoding:"async"})],-1)),l[60]||(l[60]=s("p",null,[n("变成"),s("code",null,"col*=lerp(fixed4(1,0,0,1),fixed4(0,0,1,1),sin(_Time.y*length(i.uv))/2+0.5);"),n("就会变成依赖距离变化的效果")],-1)),l[61]||(l[61]=s("p",null,[s("code",null,"fixed4 color = fixed4(abs(sin(_Time.y)), 0, 0, 1);//一个在红色和黑色不断过渡的颜色动画")],-1)),l[62]||(l[62]=s("p",null,[s("code",null,"uv.y += sin(uv.x * 25 + _Time.y) * .1;//是一个“流动”效果的UV动画")],-1)),l[63]||(l[63]=s("p",null,[s("code",null,"float c = circle(uv, float2(cos(_Time.y),sin(_Time.y)), .2);一个圆绕一个隐形的圆转动")],-1)),l[64]||(l[64]=s("p",null,"动画也可以用在vertex shader里：",-1)),l[65]||(l[65]=s("p",null,[s("code",null,"v.vertex += sin(_Time.y);")],-1)),l[66]||(l[66]=s("p",null,"比如波浪效果的一种实现就是在vertex shader里使用动画调整每个顶点的高度：",-1)),l[67]||(l[67]=s("p",null,[s("code",null,"v.vertex.y += sin(_Time.y + v.vertex.x)；")],-1)),l[68]||(l[68]=s("figure",null,[s("img",{src:z,alt:"",loading:"lazy",decoding:"async"})],-1))]),"main-header":a(()=>[e(i.$slots,"main-header")]),"main-header-after":a(()=>[e(i.$slots,"main-header-after")]),"main-nav":a(()=>[e(i.$slots,"main-nav")]),"main-content-before":a(()=>[e(i.$slots,"main-content-before")]),"main-content":a(()=>[e(i.$slots,"main-content")]),"main-content-after":a(()=>[e(i.$slots,"main-content-after")]),"main-nav-before":a(()=>[e(i.$slots,"main-nav-before")]),"main-nav-after":a(()=>[e(i.$slots,"main-nav-after")]),comment:a(()=>[e(i.$slots,"comment")]),footer:a(()=>[e(i.$slots,"footer")]),aside:a(()=>[e(i.$slots,"aside")]),"aside-custom":a(()=>[e(i.$slots,"aside-custom")]),default:a(()=>[e(i.$slots,"default")]),_:3},8,["frontmatter"])}}};export{X as default,$ as usePageData};
