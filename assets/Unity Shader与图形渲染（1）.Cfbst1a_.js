import{_ as f}from"./ValaxyMain.vue_vue_type_script_setup_true_lang.UeO0aKI3.js";import"./chunks/pinia.BFamNAX0.js";import{e as S,u as g,a as b}from"./chunks/vue-router.CLlYW99z.js";import{a7 as y,an as n,X as M,a8 as h,am as a,af as r,ac as x,aj as e,Z as U}from"./framework.DIdR4KMW.js";import"./app.D31Dy1By.js";import"./chunks/dayjs.BdcnXKr1.js";import"./chunks/vue-i18n.C-hb0qar.js";/* empty css                    */import"./chunks/nprogress.B6x19dEb.js";import"./content.DZLhsl5J.js";import"./router.-rV2tM5K.js";const B="/assets/UnityShader%E4%B8%8E%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%EF%BC%881%EF%BC%89_%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E7%A4%BA%E6%84%8F%E5%9B%BE.DRgezC1d.jpg",P=S("/posts/Unity Shader与图形渲染（1）/Unity Shader与图形渲染（1）",async i=>JSON.parse('{"title":"Unity Shader与图形渲染（1）","description":"","frontmatter":{"title":"Unity Shader与图形渲染（1）","date":"2024-01-30 13:29:49","categories":"学习","tags":["渲染","Unity"]},"headers":[],"relativePath":"pages/posts/Unity Shader与图形渲染（1）/Unity Shader与图形渲染（1）.md","lastUpdated":1761835150000}'),{lazy:(i,o)=>i.name===o.name}),j={__name:"Unity Shader与图形渲染（1）",setup(i,{expose:o}){const{data:d}=P(),u=b(),m=g(),s=Object.assign(m.meta.frontmatter||{},d.value?.frontmatter||{});return u.currentRoute.value.data=d.value,U("valaxy:frontmatter",s),globalThis.$frontmatter=s,o({frontmatter:{title:"Unity Shader与图形渲染（1）",date:"2024-01-30 13:29:49",categories:"学习",tags:["渲染","Unity"]}}),(t,l)=>{const p=f;return h(),y(p,{frontmatter:M(s)},{"main-content-md":n(()=>[l[0]||(l[0]=r("p",null,"一些基础的概念",-1)),x(" more "),l[1]||(l[1]=r("h1",{id:"shader与图形渲染",tabindex:"-1"},[e("Shader与图形渲染 "),r("a",{class:"header-anchor",href:"#shader与图形渲染","aria-label":'Permalink to "Shader与图形渲染"'},"​")],-1)),l[2]||(l[2]=r("h2",{id:"一-、基础概念",tabindex:"-1"},[e("（一）、基础概念 "),r("a",{class:"header-anchor",href:"#一-、基础概念","aria-label":'Permalink to "（一）、基础概念"'},"​")],-1)),l[3]||(l[3]=r("h3",{id:"材质-material-是什么",tabindex:"-1"},[e("材质（Material）是什么？ "),r("a",{class:"header-anchor",href:"#材质-material-是什么","aria-label":'Permalink to "材质（Material）是什么？"'},"​")],-1)),l[4]||(l[4]=r("p",null,"一个物体要显示在屏幕上，必须通过一个属于它的材质来实现。材质准确地定义了每个物体在特定情况下显示出来的颜色，比如sprite的默认材质是将图片上每个像素的颜色原封不动的显示出来（也可以自定义一个材质去修改原图片的颜色）。",-1)),l[5]||(l[5]=r("h3",{id:"实际上-材质的准确定义是着色器的一个实例-那么着色器-shader-是什么",tabindex:"-1"},[e("实际上，材质的准确定义是着色器的一个实例，那么着色器（Shader）是什么？ "),r("a",{class:"header-anchor",href:"#实际上-材质的准确定义是着色器的一个实例-那么着色器-shader-是什么","aria-label":'Permalink to "实际上，材质的准确定义是着色器的一个实例，那么着色器（Shader）是什么？"'},"​")],-1)),l[6]||(l[6]=r("p",null,"Shader是一个在GPU上面运行的程序（一般的代码是在CPU上运行的），他接受一个物体的形状、颜色等数据，通过一系列的计算来输出每个像素的颜色。",-1)),l[7]||(l[7]=r("p",null,"下面介绍一下一个立方体如何从模型数据变成屏幕上的色彩：",-1)),l[8]||(l[8]=r("p",null,"1.Shader接收到立方体的顶点、法线等数据。",-1)),l[9]||(l[9]=r("p",null,"2.Shader将这些位置转换到屏幕坐标里面。",-1)),l[10]||(l[10]=r("p",null,"3.Shader对每个像素进行染色。",-1)),l[11]||(l[11]=r("p",null,"4.Shader获取当前光照，计算每个像素受光之后的颜色。",-1)),l[12]||(l[12]=r("p",null,"5.Shader将计算好的颜色输出至屏幕。",-1)),l[13]||(l[13]=r("h3",{id:"纹理-texture-又是什么",tabindex:"-1"},[e("纹理（Texture）又是什么？ "),r("a",{class:"header-anchor",href:"#纹理-texture-又是什么","aria-label":'Permalink to "纹理（Texture）又是什么？"'},"​")],-1)),l[14]||(l[14]=r("p",null,"Texture就是一张图片，比如人物衣服的颜色。Texture在渲染流程中是Shader中的一个“texture”类型的变量，好比如熟知的float、vector等。",-1)),l[15]||(l[15]=r("p",null,"那Shader是怎么显示出木箱上的木纹的？",-1)),l[16]||(l[16]=r("ul",null,[r("li",null,[r("p",null,"······")]),r("li",null,[r("p",null,"3.Shader对于每个像素染色。")]),r("li",null,[r("p",null,[e("4.Shader读取texture中每个像素的颜色，并将颜色给到"),r("strong",null,"对应"),e("的物体像素上。")])])],-1)),l[17]||(l[17]=r("h3",{id:"material的真面目",tabindex:"-1"},[e("Material的真面目 "),r("a",{class:"header-anchor",href:"#material的真面目","aria-label":'Permalink to "Material的真面目"'},"​")],-1)),l[18]||(l[18]=r("p",null,"现在有一个Shader，其中有一个变量是“物体的颜色”，假设现在要用它去渲染五个不同颜色的物体，那需要有五个不同的Shader吗？",-1)),l[19]||(l[19]=r("p",null,"显然这样不合理，应该以Shader为模板，去衍生一系列它的实例，然后修改各个实例的颜色即可（就好像创建C#的类的实例）",-1)),l[20]||(l[20]=r("p",null,[e("而根据Shader创建出来的实例就是Material，所以每一个Material背后都有一个Shader，Material只是代表"),r("strong",null,"一个Shader变量的一系列特定值的实例"),e("。")],-1)),l[21]||(l[21]=r("h3",{id:"material、shader、texture的地位一样吗",tabindex:"-1"},[e("Material、Shader、Texture的地位一样吗？ "),r("a",{class:"header-anchor",href:"#material、shader、texture的地位一样吗","aria-label":'Permalink to "Material、Shader、Texture的地位一样吗？"'},"​")],-1)),l[22]||(l[22]=r("p",null,"这三者其实地位不一样，万物来源是Shader，Material是Shader的一个实例，Texture是Shader的一个变量。",-1)),l[23]||(l[23]=r("p",null,"那：",-1)),l[24]||(l[24]=r("p",null,"修改Shader，其相关的所有Material都会受到影响吗？",-1)),l[25]||(l[25]=r("p",null,"修改一个Material，其相关的Material都会受到影响吗？",-1)),l[26]||(l[26]=r("p",null,"显然前者的答案是肯定而后者是否定。",-1)),l[27]||(l[27]=r("h3",{id:"unity组件-meshfilter和meshrenderer",tabindex:"-1"},[e("Unity组件：MeshFilter和MeshRenderer "),r("a",{class:"header-anchor",href:"#unity组件-meshfilter和meshrenderer","aria-label":'Permalink to "Unity组件：MeshFilter和MeshRenderer"'},"​")],-1)),l[28]||(l[28]=r("p",null,"什么是Mesh？",-1)),l[29]||(l[29]=r("p",null,'"mesh"即为网格，主流的3D渲染器讲物体表面分割为一个个三角形进行渲染，整个物体表面是一个三角形的网格，通俗一点，mesh是一个模型的形状。',-1)),l[30]||(l[30]=r("p",null,"在Unity3D当中，要显示模型通常需要两个组件：MeshFilter和MeshRenderer",-1)),l[31]||(l[31]=r("p",null,[r("em",null,"2D当中只需要SpriteRenderer一个组件就可以了")],-1)),l[32]||(l[32]=r("p",null,"MeshFilter是用于处理模型本身的几何信息的（顶点位置，法线位置，切线方向等）",-1)),l[33]||(l[33]=r("p",null,"MeshRenderer是用来渲染该模型的（通过某个material）",-1)),l[34]||(l[34]=r("h3",{id:"unity的默认材质",tabindex:"-1"},[e("Unity的默认材质 "),r("a",{class:"header-anchor",href:"#unity的默认材质","aria-label":'Permalink to "Unity的默认材质"'},"​")],-1)),l[35]||(l[35]=r("p",null,"如何修改一个3D物体的颜色？",-1)),l[36]||(l[36]=r("p",null,"在2D项目中，只需要修改SpriteRenderer中的Color值就可以了，但是3D中并不可以这样更改Unity的默认材质。因为材质是shader的一个实例，所以可以用默认的shader新建一个材质，再修改材质的参数。",-1)),l[37]||(l[37]=r("h4",{id:"参数",tabindex:"-1"},[e("参数 "),r("a",{class:"header-anchor",href:"#参数","aria-label":'Permalink to "参数"'},"​")],-1)),l[38]||(l[38]=r("ol",null,[r("li",null,"Rendering Mode（渲染模式）：主要与透明度有关"),r("li",null,"Albedo（反射率）：其实就是颜色"),r("li",null,"Metallic/Smoothness（金属度/平滑度）：定义了与光照的互动强度"),r("li",null,"Normal Map（法线贴图）：用来改变物体的法线，增加细节程度")],-1)),l[39]||(l[39]=r("h3",{id:"lighting-光照",tabindex:"-1"},[e("Lighting 光照 "),r("a",{class:"header-anchor",href:"#lighting-光照","aria-label":'Permalink to "Lighting 光照"'},"​")],-1)),l[40]||(l[40]=r("p",null,"Unity提供了以下几种光照",-1)),l[41]||(l[41]=r("ol",null,[r("li",null,[r("p",null,"Directionnal（平行光）：类似“太阳光”，从某个固定的方向以固定的强度照射过来，且覆盖范围是无限的。世界中的所有物体都会平等的受到平行光的照射。一般场景里面只有一个，它的光源的position没有影响，rotation是重要的。")]),r("li",null,[r("p",null,"Point(点光)：类似“灯泡”，从一点均匀地在一定范围内发出光照，且强度随着距离减弱。显然它的position重要而rotation不重要。")]),r("li",null,[r("p",null,"Spot（聚光灯）：从一点向一个方向发出圆锥形的光照，且强度随着距离减弱。")]),r("li",null,[r("p",null,"Area（范围光）：类似有一定面积的LED灯，在一个面积上均匀地发射光线。这是唯一一个非实时光照，需要提前bakery（烘焙）。")])],-1)),l[42]||(l[42]=r("h3",{id:"渲染-rendering-是什么",tabindex:"-1"},[e("渲染（Rendering）是什么？ "),r("a",{class:"header-anchor",href:"#渲染-rendering-是什么","aria-label":'Permalink to "渲染（Rendering）是什么？"'},"​")],-1)),l[43]||(l[43]=r("p",null,"渲染是把物体模型数据转换成屏幕上每个像素的颜色的过程。",-1)),l[44]||(l[44]=r("h3",{id:"渲染管线-rendering-pipeline",tabindex:"-1"},[e("渲染管线（Rendering Pipeline） "),r("a",{class:"header-anchor",href:"#渲染管线-rendering-pipeline","aria-label":'Permalink to "渲染管线（Rendering Pipeline）"'},"​")],-1)),l[45]||(l[45]=r("p",null,"“渲染管线”代表一个特定的物体的渲染过程。",-1)),l[46]||(l[46]=r("p",null,"下图是一个标准的渲染管线（橙色的方块是可以编程的部分）。",-1)),l[47]||(l[47]=r("figure",null,[r("img",{src:B,alt:"",loading:"lazy",decoding:"async"})],-1)),l[48]||(l[48]=r("ol",null,[r("li",null,"Vertex/index buffer：模型数据（在计算机中“buffer”（缓冲）指的是一块内存空间/一个数组）"),r("li",null,[r("strong",null,"Vertex Shader"),e("： 顶点着色器")]),r("li",null,"Tessellation：曲面细分（将一个模型细分为由更多顶点的模型）"),r("li",null,"Geometry Shader：几何着色器（对几何数据进行操作，比如添加顶点）"),r("li",null,"Resterization：光栅化（将图像映射到像素空间）"),r("li",null,[r("strong",null,"Fragment Shader"),e("：片元着色器")]),r("li",null,"Color Blending：处理透明度"),r("li",null,"Frame Buffer：当前帧所有像素的颜色")],-1)),l[49]||(l[49]=r("p",null,"简单的理解一下渲染过程：",-1)),l[50]||(l[50]=r("ol",null,[r("li",null,"（Vertex Buffer）对于一个模型，收到很多顶点的数据。每个顶点包括位置，法线，颜色等等。"),r("li",null,"（Vertex Shader）接着，对每一个顶点执行一段程序。比如“向右移动一个单位”。"),r("li",null,"（Interpolation）已经完成了顶点的处理，但顶点之间的三角形是由很多像素组成的。需要将这些顶点的数据平 均分配给它旁边的像素。"),r("li",null,"（Fragment Shader）现在对每一个像素执行一段程序。比如“将这个像素染成红色”。"),r("li",null,"最后，将这些像素的颜色显示在屏幕上。")],-1)),l[51]||(l[51]=r("p",null,"学习参考：",-1)),l[52]||(l[52]=r("p",null,[r("a",{href:"https://space.bilibili.com/28471795",target:"_blank",rel:"noreferrer"},"Silverjay银鸟工作室个人主页")],-1)),l[53]||(l[53]=r("p",null,[r("a",{href:"https://docs.unity3d.com/cn/2023.2/Manual/UnityManual.html",target:"_blank",rel:"noreferrer"},"Unity官方文档")],-1))]),"main-header":n(()=>[a(t.$slots,"main-header")]),"main-header-after":n(()=>[a(t.$slots,"main-header-after")]),"main-nav":n(()=>[a(t.$slots,"main-nav")]),"main-content-before":n(()=>[a(t.$slots,"main-content-before")]),"main-content":n(()=>[a(t.$slots,"main-content")]),"main-content-after":n(()=>[a(t.$slots,"main-content-after")]),"main-nav-before":n(()=>[a(t.$slots,"main-nav-before")]),"main-nav-after":n(()=>[a(t.$slots,"main-nav-after")]),comment:n(()=>[a(t.$slots,"comment")]),footer:n(()=>[a(t.$slots,"footer")]),aside:n(()=>[a(t.$slots,"aside")]),"aside-custom":n(()=>[a(t.$slots,"aside-custom")]),default:n(()=>[a(t.$slots,"default")]),_:3},8,["frontmatter"])}}};export{j as default,P as usePageData};
